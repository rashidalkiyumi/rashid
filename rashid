package airLine;

import java.io.IOException;

import org.apache.hadoop.fs.Path;

import org.apache.hadoop.conf.*;

import org.apache.hadoop.io.*;

import org.apache.hadoop.mapreduce.*;

import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;

import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;

import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;



//Making a class with name Airline_deley

public class Airline_deley

{

      public static class Map extends Mapper<LongWritable, Text, Text, IntWritable>

      {

        // private text Airline variable

        private Text Airline = new Text();

 

        // private IntWritable variable delay will store the delay. Where key is Airline and value is delay

        private IntWritable deley = new IntWritable();

       

        // overriding map method(run for one time for each record in data set)

        public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException

        {

            // storing the complete record in a variable name line

            String li_data = value.toString();

 

            // splitting the line with ', ' as the values are separated with this delimiter

            String st_data[] = li_data.split(", ");

 

         // Checking if the detest has at least 9 columns

            if (st_data.length >= 9) {

                  Airline.set(st_data[1]);

                String delayStr = st_data[8];

           


       


         // Checking if the delay value is numeric

            if (delayStr.matches("\\d+")) {

                int delayValue = Integer.parseInt(delayStr);

                deley.set(delayValue);

                context.write(Airline, deley);

            }


      }

}

}



public static class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> {

    // overriding reduce method(runs each time for every key )

    public void reduce(Text key, Iterable<IntWritable> values, Context context)

        throws IOException, InterruptedException

        {

      int sum = 0;

        int count = 0;


        for (IntWritable val : values) {

            sum += val.get();

            count++;

        }

        int averageDelay = sum / count;

        String output = "Total Delay: " + sum + ", Average Delay: " + averageDelay + ", Number of Delays: " + count;


        context.write(key, new IntWritable(Integer.parseInt(output.toString())));

      


        }

}

    @SuppressWarnings("deprecation")

    public static void main(String[] args) throws Exception

    {

      Configuration conf = new Configuration();


        Job SDF = new Job(conf, "Average  delay for airline");

        SDF.setJarByClass(Airline_deley.class);

        SDF.setMapOutputKeyClass(Text.class);

        SDF.setMapOutputValueClass(IntWritable.class);

         

        // job.setNumReduceTasks(0);

        SDF.setOutputKeyClass(Text.class);

        SDF.setOutputValueClass(IntWritable.class);

        SDF.setMapperClass(Map.class);

        SDF.setReducerClass(Reduce.class);


        SDF.setInputFormatClass(TextInputFormat.class);

        SDF.setOutputFormatClass(TextOutputFormat.class);

        FileInputFormat.addInputPath(SDF, new Path(args[0]));

        FileOutputFormat.setOutputPath(SDF, new Path(args[1]));

        Path out_put = new Path(args[1]);

        out_put.getFileSystem(conf).delete(out_put);

        SDF.waitForCompletion(true);


    }


}
